/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
)

// checks if the V1SpotsGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1SpotsGet200Response{}

// V1SpotsGet200Response struct for V1SpotsGet200Response
type V1SpotsGet200Response struct {
	Results []Spot `json:"results,omitempty"`
	Status *int32 `json:"status,omitempty"`
}

// NewV1SpotsGet200Response instantiates a new V1SpotsGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1SpotsGet200Response() *V1SpotsGet200Response {
	this := V1SpotsGet200Response{}
	return &this
}

// NewV1SpotsGet200ResponseWithDefaults instantiates a new V1SpotsGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1SpotsGet200ResponseWithDefaults() *V1SpotsGet200Response {
	this := V1SpotsGet200Response{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *V1SpotsGet200Response) GetResults() []Spot {
	if o == nil || IsNil(o.Results) {
		var ret []Spot
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SpotsGet200Response) GetResultsOk() ([]Spot, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *V1SpotsGet200Response) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []Spot and assigns it to the Results field.
func (o *V1SpotsGet200Response) SetResults(v []Spot) {
	o.Results = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *V1SpotsGet200Response) GetStatus() int32 {
	if o == nil || IsNil(o.Status) {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1SpotsGet200Response) GetStatusOk() (*int32, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *V1SpotsGet200Response) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *V1SpotsGet200Response) SetStatus(v int32) {
	o.Status = &v
}

func (o V1SpotsGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1SpotsGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableV1SpotsGet200Response struct {
	value *V1SpotsGet200Response
	isSet bool
}

func (v NullableV1SpotsGet200Response) Get() *V1SpotsGet200Response {
	return v.value
}

func (v *NullableV1SpotsGet200Response) Set(val *V1SpotsGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableV1SpotsGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableV1SpotsGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1SpotsGet200Response(val *V1SpotsGet200Response) *NullableV1SpotsGet200Response {
	return &NullableV1SpotsGet200Response{value: val, isSet: true}
}

func (v NullableV1SpotsGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1SpotsGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


