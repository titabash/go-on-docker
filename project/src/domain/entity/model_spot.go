/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
	"time"
)

// checks if the Spot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Spot{}

// Spot struct for Spot
type Spot struct {
	Id string `json:"id" firestore:"id"`
	Name *string `json:"name,omitempty" firestore:"name"`
	Description *string `json:"description,omitempty" firestore:"description"`
	Provider *string `json:"provider,omitempty" firestore:"provider"`
	Location *Location `json:"location,omitempty" firestore:"location"`
	Instagram *Instagram `json:"instagram,omitempty" firestore:"instagram"`
	GoogleMap *GoogleMap `json:"google_map,omitempty" firestore:"google_map"`
	Proprietary *Proprietary `json:"proprietary,omitempty" firestore:"proprietary"`
	Address *Address `json:"address,omitempty" firestore:"address"`
	Categories []Category `json:"categories,omitempty" firestore:"categories"`
	CreatedAt time.Time `json:"created_at" firestore:"created_at"`
	UpdatedAt time.Time `json:"updated_at" firestore:"updated_at"`
}

// NewSpot instantiates a new Spot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpot(id string, createdAt time.Time, updatedAt time.Time) *Spot {
	this := Spot{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewSpotWithDefaults instantiates a new Spot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpotWithDefaults() *Spot {
	this := Spot{}
	return &this
}

// GetId returns the Id field value
func (o *Spot) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Spot) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Spot) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Spot) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Spot) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Spot) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Spot) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Spot) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Spot) SetDescription(v string) {
	o.Description = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Spot) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Spot) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *Spot) SetProvider(v string) {
	o.Provider = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Spot) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Spot) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Spot) SetLocation(v Location) {
	o.Location = &v
}

// GetInstagram returns the Instagram field value if set, zero value otherwise.
func (o *Spot) GetInstagram() Instagram {
	if o == nil || IsNil(o.Instagram) {
		var ret Instagram
		return ret
	}
	return *o.Instagram
}

// GetInstagramOk returns a tuple with the Instagram field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetInstagramOk() (*Instagram, bool) {
	if o == nil || IsNil(o.Instagram) {
		return nil, false
	}
	return o.Instagram, true
}

// HasInstagram returns a boolean if a field has been set.
func (o *Spot) HasInstagram() bool {
	if o != nil && !IsNil(o.Instagram) {
		return true
	}

	return false
}

// SetInstagram gets a reference to the given Instagram and assigns it to the Instagram field.
func (o *Spot) SetInstagram(v Instagram) {
	o.Instagram = &v
}

// GetGoogleMap returns the GoogleMap field value if set, zero value otherwise.
func (o *Spot) GetGoogleMap() GoogleMap {
	if o == nil || IsNil(o.GoogleMap) {
		var ret GoogleMap
		return ret
	}
	return *o.GoogleMap
}

// GetGoogleMapOk returns a tuple with the GoogleMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetGoogleMapOk() (*GoogleMap, bool) {
	if o == nil || IsNil(o.GoogleMap) {
		return nil, false
	}
	return o.GoogleMap, true
}

// HasGoogleMap returns a boolean if a field has been set.
func (o *Spot) HasGoogleMap() bool {
	if o != nil && !IsNil(o.GoogleMap) {
		return true
	}

	return false
}

// SetGoogleMap gets a reference to the given GoogleMap and assigns it to the GoogleMap field.
func (o *Spot) SetGoogleMap(v GoogleMap) {
	o.GoogleMap = &v
}

// GetProprietary returns the Proprietary field value if set, zero value otherwise.
func (o *Spot) GetProprietary() Proprietary {
	if o == nil || IsNil(o.Proprietary) {
		var ret Proprietary
		return ret
	}
	return *o.Proprietary
}

// GetProprietaryOk returns a tuple with the Proprietary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetProprietaryOk() (*Proprietary, bool) {
	if o == nil || IsNil(o.Proprietary) {
		return nil, false
	}
	return o.Proprietary, true
}

// HasProprietary returns a boolean if a field has been set.
func (o *Spot) HasProprietary() bool {
	if o != nil && !IsNil(o.Proprietary) {
		return true
	}

	return false
}

// SetProprietary gets a reference to the given Proprietary and assigns it to the Proprietary field.
func (o *Spot) SetProprietary(v Proprietary) {
	o.Proprietary = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *Spot) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *Spot) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *Spot) SetAddress(v Address) {
	o.Address = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Spot) GetCategories() []Category {
	if o == nil || IsNil(o.Categories) {
		var ret []Category
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spot) GetCategoriesOk() ([]Category, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Spot) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []Category and assigns it to the Categories field.
func (o *Spot) SetCategories(v []Category) {
	o.Categories = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Spot) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Spot) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Spot) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Spot) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Spot) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Spot) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

func (o Spot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Spot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Instagram) {
		toSerialize["instagram"] = o.Instagram
	}
	if !IsNil(o.GoogleMap) {
		toSerialize["google_map"] = o.GoogleMap
	}
	if !IsNil(o.Proprietary) {
		toSerialize["proprietary"] = o.Proprietary
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

type NullableSpot struct {
	value *Spot
	isSet bool
}

func (v NullableSpot) Get() *Spot {
	return v.value
}

func (v *NullableSpot) Set(val *Spot) {
	v.value = val
	v.isSet = true
}

func (v NullableSpot) IsSet() bool {
	return v.isSet
}

func (v *NullableSpot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpot(val *Spot) *NullableSpot {
	return &NullableSpot{value: val, isSet: true}
}

func (v NullableSpot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


