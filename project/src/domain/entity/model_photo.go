/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
)

// checks if the Photo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Photo{}

// Photo struct for Photo
type Photo struct {
	Url *string `json:"url,omitempty" firestore:"url"`
	OriginUrl *string `json:"origin_url,omitempty" firestore:"origin_url"`
	Path *string `json:"path,omitempty" firestore:"path"`
	Provider *string `json:"provider,omitempty" firestore:"provider"`
}

// NewPhoto instantiates a new Photo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhoto() *Photo {
	this := Photo{}
	return &this
}

// NewPhotoWithDefaults instantiates a new Photo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhotoWithDefaults() *Photo {
	this := Photo{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Photo) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Photo) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Photo) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Photo) SetUrl(v string) {
	o.Url = &v
}

// GetOriginUrl returns the OriginUrl field value if set, zero value otherwise.
func (o *Photo) GetOriginUrl() string {
	if o == nil || IsNil(o.OriginUrl) {
		var ret string
		return ret
	}
	return *o.OriginUrl
}

// GetOriginUrlOk returns a tuple with the OriginUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Photo) GetOriginUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OriginUrl) {
		return nil, false
	}
	return o.OriginUrl, true
}

// HasOriginUrl returns a boolean if a field has been set.
func (o *Photo) HasOriginUrl() bool {
	if o != nil && !IsNil(o.OriginUrl) {
		return true
	}

	return false
}

// SetOriginUrl gets a reference to the given string and assigns it to the OriginUrl field.
func (o *Photo) SetOriginUrl(v string) {
	o.OriginUrl = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Photo) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Photo) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Photo) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Photo) SetPath(v string) {
	o.Path = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *Photo) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Photo) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *Photo) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *Photo) SetProvider(v string) {
	o.Provider = &v
}

func (o Photo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Photo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.OriginUrl) {
		toSerialize["origin_url"] = o.OriginUrl
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	return toSerialize, nil
}

type NullablePhoto struct {
	value *Photo
	isSet bool
}

func (v NullablePhoto) Get() *Photo {
	return v.value
}

func (v *NullablePhoto) Set(val *Photo) {
	v.value = val
	v.isSet = true
}

func (v NullablePhoto) IsSet() bool {
	return v.isSet
}

func (v *NullablePhoto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhoto(val *Photo) *NullablePhoto {
	return &NullablePhoto{value: val, isSet: true}
}

func (v NullablePhoto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhoto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


