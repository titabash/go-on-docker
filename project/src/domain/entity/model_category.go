/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
)

// checks if the Category type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Category{}

// Category struct for Category
type Category struct {
	Id string `json:"id" firestore:"id"`
	Name string `json:"name" firestore:"name"`
	GoogleMapTypes []string `json:"google_map_types,omitempty" firestore:"google_map_type"`
}

// NewCategory instantiates a new Category object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCategory(id string, name string) *Category {
	this := Category{}
	this.Id = id
	this.Name = name
	return &this
}

// NewCategoryWithDefaults instantiates a new Category object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCategoryWithDefaults() *Category {
	this := Category{}
	return &this
}

// GetId returns the Id field value
func (o *Category) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Category) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Category) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Category) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Category) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Category) SetName(v string) {
	o.Name = v
}

// GetGoogleMapTypes returns the GoogleMapTypes field value if set, zero value otherwise.
func (o *Category) GetGoogleMapTypes() []string {
	if o == nil || IsNil(o.GoogleMapTypes) {
		var ret []string
		return ret
	}
	return o.GoogleMapTypes
}

// GetGoogleMapTypesOk returns a tuple with the GoogleMapTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Category) GetGoogleMapTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.GoogleMapTypes) {
		return nil, false
	}
	return o.GoogleMapTypes, true
}

// HasGoogleMapTypes returns a boolean if a field has been set.
func (o *Category) HasGoogleMapTypes() bool {
	if o != nil && !IsNil(o.GoogleMapTypes) {
		return true
	}

	return false
}

// SetGoogleMapTypes gets a reference to the given []string and assigns it to the GoogleMapTypes field.
func (o *Category) SetGoogleMapTypes(v []string) {
	o.GoogleMapTypes = v
}

func (o Category) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Category) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.GoogleMapTypes) {
		toSerialize["google_map_types"] = o.GoogleMapTypes
	}
	return toSerialize, nil
}

type NullableCategory struct {
	value *Category
	isSet bool
}

func (v NullableCategory) Get() *Category {
	return v.value
}

func (v *NullableCategory) Set(val *Category) {
	v.value = val
	v.isSet = true
}

func (v NullableCategory) IsSet() bool {
	return v.isSet
}

func (v *NullableCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCategory(val *Category) *NullableCategory {
	return &NullableCategory{value: val, isSet: true}
}

func (v NullableCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


