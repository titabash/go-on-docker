/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
)

// checks if the Proprietary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Proprietary{}

// Proprietary struct for Proprietary
type Proprietary struct {
	Rating *float64 `json:"rating,omitempty" firestore:"rating"`
	CheckinIds []string `json:"checkin_ids,omitempty" firestore:"checkin_ids"`
}

// NewProprietary instantiates a new Proprietary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProprietary() *Proprietary {
	this := Proprietary{}
	return &this
}

// NewProprietaryWithDefaults instantiates a new Proprietary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProprietaryWithDefaults() *Proprietary {
	this := Proprietary{}
	return &this
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *Proprietary) GetRating() float64 {
	if o == nil || IsNil(o.Rating) {
		var ret float64
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proprietary) GetRatingOk() (*float64, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *Proprietary) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given float64 and assigns it to the Rating field.
func (o *Proprietary) SetRating(v float64) {
	o.Rating = &v
}

// GetCheckinIds returns the CheckinIds field value if set, zero value otherwise.
func (o *Proprietary) GetCheckinIds() []string {
	if o == nil || IsNil(o.CheckinIds) {
		var ret []string
		return ret
	}
	return o.CheckinIds
}

// GetCheckinIdsOk returns a tuple with the CheckinIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Proprietary) GetCheckinIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.CheckinIds) {
		return nil, false
	}
	return o.CheckinIds, true
}

// HasCheckinIds returns a boolean if a field has been set.
func (o *Proprietary) HasCheckinIds() bool {
	if o != nil && !IsNil(o.CheckinIds) {
		return true
	}

	return false
}

// SetCheckinIds gets a reference to the given []string and assigns it to the CheckinIds field.
func (o *Proprietary) SetCheckinIds(v []string) {
	o.CheckinIds = v
}

func (o Proprietary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Proprietary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.CheckinIds) {
		toSerialize["checkin_ids"] = o.CheckinIds
	}
	return toSerialize, nil
}

type NullableProprietary struct {
	value *Proprietary
	isSet bool
}

func (v NullableProprietary) Get() *Proprietary {
	return v.value
}

func (v *NullableProprietary) Set(val *Proprietary) {
	v.value = val
	v.isSet = true
}

func (v NullableProprietary) IsSet() bool {
	return v.isSet
}

func (v *NullableProprietary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProprietary(val *Proprietary) *NullableProprietary {
	return &NullableProprietary{value: val, isSet: true}
}

func (v NullableProprietary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProprietary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


