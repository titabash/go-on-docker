/*
Spot

A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entity

import (
	"encoding/json"
	"time"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Id string `json:"id" firestore:"id"`
	FirebaseAuthId *string `json:"firebase_auth_id,omitempty" firestore:"firebase_auth_id"`
	DisplayName string `json:"display_name" firestore:"display_name"`
	AccountName string `json:"account_name" firestore:"account_name"`
	FirstName *string `json:"first_name,omitempty" firestore:"first_name"`
	LastName *string `json:"last_name,omitempty" firestore:"last_name"`
	ProfilePicture *UserProfilePicture `json:"profile_picture,omitempty" firestore:"profile_picture"`
	Age *int32 `json:"age,omitempty" firestore:"age"`
	Birthday *time.Time `json:"birthday,omitempty" firestore:"birthday"`
	Gender *string `json:"gender,omitempty" firestore:"gender"`
	SpouseId NullableString `json:"spouse_id,omitempty" firestore:"spouse_id"`
	ChildrenIds []string `json:"children_ids,omitempty" firestore:"children_ids"`
	Address *Address `json:"address,omitempty" firestore:"address"`
	HomeLocation *Location `json:"home_location,omitempty" firestore:"location"`
	CurrentLocation *Location `json:"current_location,omitempty" firestore:"location"`
	CreatedAt time.Time `json:"created_at" firestore:"created_at"`
	UpdatedAt time.Time `json:"updated_at" firestore:"updated_at"`
	FollowerIds []string `json:"follower_ids,omitempty" firestore:"follower_ids"`
	FollowingIds []string `json:"following_ids,omitempty" firestore:"following_ids"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(id string, displayName string, accountName string, createdAt time.Time, updatedAt time.Time) *User {
	this := User{}
	this.Id = id
	this.DisplayName = displayName
	this.AccountName = accountName
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetFirebaseAuthId returns the FirebaseAuthId field value if set, zero value otherwise.
func (o *User) GetFirebaseAuthId() string {
	if o == nil || IsNil(o.FirebaseAuthId) {
		var ret string
		return ret
	}
	return *o.FirebaseAuthId
}

// GetFirebaseAuthIdOk returns a tuple with the FirebaseAuthId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirebaseAuthIdOk() (*string, bool) {
	if o == nil || IsNil(o.FirebaseAuthId) {
		return nil, false
	}
	return o.FirebaseAuthId, true
}

// HasFirebaseAuthId returns a boolean if a field has been set.
func (o *User) HasFirebaseAuthId() bool {
	if o != nil && !IsNil(o.FirebaseAuthId) {
		return true
	}

	return false
}

// SetFirebaseAuthId gets a reference to the given string and assigns it to the FirebaseAuthId field.
func (o *User) SetFirebaseAuthId(v string) {
	o.FirebaseAuthId = &v
}

// GetDisplayName returns the DisplayName field value
func (o *User) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *User) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *User) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetAccountName returns the AccountName field value
func (o *User) GetAccountName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountName
}

// GetAccountNameOk returns a tuple with the AccountName field value
// and a boolean to check if the value has been set.
func (o *User) GetAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountName, true
}

// SetAccountName sets field value
func (o *User) SetAccountName(v string) {
	o.AccountName = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *User) GetFirstName() string {
	if o == nil || IsNil(o.FirstName) {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFirstNameOk() (*string, bool) {
	if o == nil || IsNil(o.FirstName) {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *User) HasFirstName() bool {
	if o != nil && !IsNil(o.FirstName) {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *User) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *User) GetLastName() string {
	if o == nil || IsNil(o.LastName) {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastNameOk() (*string, bool) {
	if o == nil || IsNil(o.LastName) {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *User) HasLastName() bool {
	if o != nil && !IsNil(o.LastName) {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *User) SetLastName(v string) {
	o.LastName = &v
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise.
func (o *User) GetProfilePicture() UserProfilePicture {
	if o == nil || IsNil(o.ProfilePicture) {
		var ret UserProfilePicture
		return ret
	}
	return *o.ProfilePicture
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfilePictureOk() (*UserProfilePicture, bool) {
	if o == nil || IsNil(o.ProfilePicture) {
		return nil, false
	}
	return o.ProfilePicture, true
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *User) HasProfilePicture() bool {
	if o != nil && !IsNil(o.ProfilePicture) {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given UserProfilePicture and assigns it to the ProfilePicture field.
func (o *User) SetProfilePicture(v UserProfilePicture) {
	o.ProfilePicture = &v
}

// GetAge returns the Age field value if set, zero value otherwise.
func (o *User) GetAge() int32 {
	if o == nil || IsNil(o.Age) {
		var ret int32
		return ret
	}
	return *o.Age
}

// GetAgeOk returns a tuple with the Age field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAgeOk() (*int32, bool) {
	if o == nil || IsNil(o.Age) {
		return nil, false
	}
	return o.Age, true
}

// HasAge returns a boolean if a field has been set.
func (o *User) HasAge() bool {
	if o != nil && !IsNil(o.Age) {
		return true
	}

	return false
}

// SetAge gets a reference to the given int32 and assigns it to the Age field.
func (o *User) SetAge(v int32) {
	o.Age = &v
}

// GetBirthday returns the Birthday field value if set, zero value otherwise.
func (o *User) GetBirthday() time.Time {
	if o == nil || IsNil(o.Birthday) {
		var ret time.Time
		return ret
	}
	return *o.Birthday
}

// GetBirthdayOk returns a tuple with the Birthday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBirthdayOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Birthday) {
		return nil, false
	}
	return o.Birthday, true
}

// HasBirthday returns a boolean if a field has been set.
func (o *User) HasBirthday() bool {
	if o != nil && !IsNil(o.Birthday) {
		return true
	}

	return false
}

// SetBirthday gets a reference to the given time.Time and assigns it to the Birthday field.
func (o *User) SetBirthday(v time.Time) {
	o.Birthday = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *User) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *User) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *User) SetGender(v string) {
	o.Gender = &v
}

// GetSpouseId returns the SpouseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSpouseId() string {
	if o == nil || IsNil(o.SpouseId.Get()) {
		var ret string
		return ret
	}
	return *o.SpouseId.Get()
}

// GetSpouseIdOk returns a tuple with the SpouseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSpouseIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SpouseId.Get(), o.SpouseId.IsSet()
}

// HasSpouseId returns a boolean if a field has been set.
func (o *User) HasSpouseId() bool {
	if o != nil && o.SpouseId.IsSet() {
		return true
	}

	return false
}

// SetSpouseId gets a reference to the given NullableString and assigns it to the SpouseId field.
func (o *User) SetSpouseId(v string) {
	o.SpouseId.Set(&v)
}
// SetSpouseIdNil sets the value for SpouseId to be an explicit nil
func (o *User) SetSpouseIdNil() {
	o.SpouseId.Set(nil)
}

// UnsetSpouseId ensures that no value is present for SpouseId, not even an explicit nil
func (o *User) UnsetSpouseId() {
	o.SpouseId.Unset()
}

// GetChildrenIds returns the ChildrenIds field value if set, zero value otherwise.
func (o *User) GetChildrenIds() []string {
	if o == nil || IsNil(o.ChildrenIds) {
		var ret []string
		return ret
	}
	return o.ChildrenIds
}

// GetChildrenIdsOk returns a tuple with the ChildrenIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetChildrenIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildrenIds) {
		return nil, false
	}
	return o.ChildrenIds, true
}

// HasChildrenIds returns a boolean if a field has been set.
func (o *User) HasChildrenIds() bool {
	if o != nil && !IsNil(o.ChildrenIds) {
		return true
	}

	return false
}

// SetChildrenIds gets a reference to the given []string and assigns it to the ChildrenIds field.
func (o *User) SetChildrenIds(v []string) {
	o.ChildrenIds = v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *User) GetAddress() Address {
	if o == nil || IsNil(o.Address) {
		var ret Address
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAddressOk() (*Address, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *User) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given Address and assigns it to the Address field.
func (o *User) SetAddress(v Address) {
	o.Address = &v
}

// GetHomeLocation returns the HomeLocation field value if set, zero value otherwise.
func (o *User) GetHomeLocation() Location {
	if o == nil || IsNil(o.HomeLocation) {
		var ret Location
		return ret
	}
	return *o.HomeLocation
}

// GetHomeLocationOk returns a tuple with the HomeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHomeLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.HomeLocation) {
		return nil, false
	}
	return o.HomeLocation, true
}

// HasHomeLocation returns a boolean if a field has been set.
func (o *User) HasHomeLocation() bool {
	if o != nil && !IsNil(o.HomeLocation) {
		return true
	}

	return false
}

// SetHomeLocation gets a reference to the given Location and assigns it to the HomeLocation field.
func (o *User) SetHomeLocation(v Location) {
	o.HomeLocation = &v
}

// GetCurrentLocation returns the CurrentLocation field value if set, zero value otherwise.
func (o *User) GetCurrentLocation() Location {
	if o == nil || IsNil(o.CurrentLocation) {
		var ret Location
		return ret
	}
	return *o.CurrentLocation
}

// GetCurrentLocationOk returns a tuple with the CurrentLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCurrentLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.CurrentLocation) {
		return nil, false
	}
	return o.CurrentLocation, true
}

// HasCurrentLocation returns a boolean if a field has been set.
func (o *User) HasCurrentLocation() bool {
	if o != nil && !IsNil(o.CurrentLocation) {
		return true
	}

	return false
}

// SetCurrentLocation gets a reference to the given Location and assigns it to the CurrentLocation field.
func (o *User) SetCurrentLocation(v Location) {
	o.CurrentLocation = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *User) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *User) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *User) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *User) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *User) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetFollowerIds returns the FollowerIds field value if set, zero value otherwise.
func (o *User) GetFollowerIds() []string {
	if o == nil || IsNil(o.FollowerIds) {
		var ret []string
		return ret
	}
	return o.FollowerIds
}

// GetFollowerIdsOk returns a tuple with the FollowerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFollowerIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowerIds) {
		return nil, false
	}
	return o.FollowerIds, true
}

// HasFollowerIds returns a boolean if a field has been set.
func (o *User) HasFollowerIds() bool {
	if o != nil && !IsNil(o.FollowerIds) {
		return true
	}

	return false
}

// SetFollowerIds gets a reference to the given []string and assigns it to the FollowerIds field.
func (o *User) SetFollowerIds(v []string) {
	o.FollowerIds = v
}

// GetFollowingIds returns the FollowingIds field value if set, zero value otherwise.
func (o *User) GetFollowingIds() []string {
	if o == nil || IsNil(o.FollowingIds) {
		var ret []string
		return ret
	}
	return o.FollowingIds
}

// GetFollowingIdsOk returns a tuple with the FollowingIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetFollowingIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowingIds) {
		return nil, false
	}
	return o.FollowingIds, true
}

// HasFollowingIds returns a boolean if a field has been set.
func (o *User) HasFollowingIds() bool {
	if o != nil && !IsNil(o.FollowingIds) {
		return true
	}

	return false
}

// SetFollowingIds gets a reference to the given []string and assigns it to the FollowingIds field.
func (o *User) SetFollowingIds(v []string) {
	o.FollowingIds = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.FirebaseAuthId) {
		toSerialize["firebase_auth_id"] = o.FirebaseAuthId
	}
	toSerialize["display_name"] = o.DisplayName
	toSerialize["account_name"] = o.AccountName
	if !IsNil(o.FirstName) {
		toSerialize["first_name"] = o.FirstName
	}
	if !IsNil(o.LastName) {
		toSerialize["last_name"] = o.LastName
	}
	if !IsNil(o.ProfilePicture) {
		toSerialize["profile_picture"] = o.ProfilePicture
	}
	if !IsNil(o.Age) {
		toSerialize["age"] = o.Age
	}
	if !IsNil(o.Birthday) {
		toSerialize["birthday"] = o.Birthday
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if o.SpouseId.IsSet() {
		toSerialize["spouse_id"] = o.SpouseId.Get()
	}
	if !IsNil(o.ChildrenIds) {
		toSerialize["children_ids"] = o.ChildrenIds
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.HomeLocation) {
		toSerialize["home_location"] = o.HomeLocation
	}
	if !IsNil(o.CurrentLocation) {
		toSerialize["current_location"] = o.CurrentLocation
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if !IsNil(o.FollowerIds) {
		toSerialize["follower_ids"] = o.FollowerIds
	}
	if !IsNil(o.FollowingIds) {
		toSerialize["following_ids"] = o.FollowingIds
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


